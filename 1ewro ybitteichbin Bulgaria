
local QuickHacksUI = {RainbowColorValue = 0, HueSelectionPosition = 0}
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local LocalPlayer = game:GetService("Players").LocalPlayer
local Mouse = LocalPlayer:GetMouse()
local PresetColor = Color3.fromRGB(44, 120, 224)
local CloseBind = Enum.KeyCode.RightControl
local CurrentUIBackgroundColor = Color3.fromRGB(30, 30, 30)
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")
local activeNotifications = {}

if game.CoreGui:FindFirstChild("QuickHacksUI") then
    game.CoreGui.QuickHacksUI:Destroy()
end

local ui = Instance.new("ScreenGui")
ui.Name = "QuickHacksUI"
ui.Parent = game.CoreGui
ui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

coroutine.wrap(function()
    while wait() do
        QuickHacksUI.RainbowColorValue = QuickHacksUI.RainbowColorValue + 1 / 255
        QuickHacksUI.HueSelectionPosition = QuickHacksUI.HueSelectionPosition + 1
        if QuickHacksUI.RainbowColorValue >= 1 then QuickHacksUI.RainbowColorValue = 0 end
        if QuickHacksUI.HueSelectionPosition == 80 then QuickHacksUI.HueSelectionPosition = 0 end
    end
end)()

local function MakeDraggable(topbarobject, object)
    local Dragging, DragInput, DragStart, StartPosition
    local function Update(input)
        local Delta = input.Position - DragStart
        local pos = UDim2.new(StartPosition.X.Scale, StartPosition.X.Offset + Delta.X, StartPosition.Y.Scale, StartPosition.Y.Offset + Delta.Y)
        local elapsed = 0
        local duration = 0.05
        local connection
        connection = RunService.RenderStepped:Connect(function(dt)
            elapsed = elapsed + dt
            local t = math.clamp(elapsed / duration, 0, 1)
            local easedT = t * t * (3 - 2 * t)
            object.Position = UDim2.new(
                pos.X.Scale, pos.X.Offset * easedT,
                pos.Y.Scale, pos.Y.Offset * easedT
            )
            if t >= 1 then connection:Disconnect() end
        end)
    end
    topbarobject.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            Dragging = true
            DragStart = input.Position
            StartPosition = object.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then Dragging = false end
            end)
        end
    end)
    topbarobject.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            DragInput = input
        end
    end)
    UserInputService.InputChanged:Connect(function(input)
        if input == DragInput and Dragging then Update(input) end
    end)
end

local function createCustomNotification(title, message, isError)
    local NotifGui = Instance.new("ScreenGui")
    NotifGui.Name = "CustomNotif"
    NotifGui.Parent = PlayerGui
    
    local NotifFrame = Instance.new("Frame")
    NotifFrame.Size = UDim2.new(0, 250, 0, 60)
    NotifFrame.Position = UDim2.new(1, 260, 1, -70)
    NotifFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    NotifFrame.BackgroundTransparency = 0
    NotifFrame.BorderSizePixel = 0
    NotifFrame.Parent = NotifGui
    
    local Gradient = Instance.new("UIGradient")
    Gradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, isError and Color3.fromRGB(255, 50, 50) or Color3.fromRGB(85, 0, 127)),
        ColorSequenceKeypoint.new(1, isError and Color3.fromRGB(200, 0, 0) or Color3.fromRGB(0, 200, 0))
    }
    Gradient.Rotation = 45
    Gradient.Parent = NotifFrame
    
    local Stroke = Instance.new("UIStroke")
    Stroke.Color = isError and Color3.fromRGB(255, 100, 100) or Color3.fromRGB(150, 50, 255)
    Stroke.Thickness = 1.5
    Stroke.Transparency = 0.2
    Stroke.Parent = NotifFrame
    
    local Corner = Instance.new("UICorner")
    Corner.CornerRadius = UDim.new(0, 10)
    Corner.Parent = NotifFrame
    
    local Icon = Instance.new("ImageLabel")
    Icon.Size = UDim2.new(0, 30, 0, 30)
    Icon.Position = UDim2.new(0, 10, 0.5, -15)
    Icon.BackgroundTransparency = 1
    Icon.Image = isError and "rbxassetid://6035047409" or "rbxassetid://138861967300749"
    Icon.ImageColor3 = Color3.fromRGB(255, 255, 255)
    Icon.Parent = NotifFrame
    
    local TitleLabel = Instance.new("TextLabel")
    TitleLabel.Size = UDim2.new(0, 190, 0, 18)
    TitleLabel.Position = UDim2.new(0, 50, 0, 8)
    TitleLabel.BackgroundTransparency = 1
    TitleLabel.Text = title
    TitleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    TitleLabel.TextSize = 16
    TitleLabel.Font = Enum.Font.GothamBold
    TitleLabel.TextXAlignment = Enum.TextXAlignment.Left
    TitleLabel.Parent = NotifFrame
    
    local MessageLabel = Instance.new("TextLabel")
    MessageLabel.Size = UDim2.new(0, 190, 0, 30)
    MessageLabel.Position = UDim2.new(0, 50, 0, 26)
    MessageLabel.BackgroundTransparency = 1
    MessageLabel.Text = message
    MessageLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
    MessageLabel.TextSize = 12
    MessageLabel.Font = Enum.Font.Gotham
    MessageLabel.TextXAlignment = Enum.TextXAlignment.Left
    MessageLabel.TextWrapped = true
    MessageLabel.Parent = NotifFrame
    
    for i, notif in ipairs(activeNotifications) do
        local newY = -70 - (i * 65)
        local startPos = notif.Frame.Position
        local endPos = UDim2.new(1, -260, 1, newY)
        local elapsed = 0
        local duration = 0.3
        local connection
        connection = RunService.RenderStepped:Connect(function(dt)
            elapsed = elapsed + dt
            local t = math.clamp(elapsed / duration, 0, 1)
            local easedT = t * t * (3 - 2 * t)
            notif.Frame.Position = UDim2.new(
                startPos.X.Scale, startPos.X.Offset + (endPos.X.Offset - startPos.X.Offset) * easedT,
                startPos.Y.Scale, startPos.Y.Offset + (endPos.Y.Offset - startPos.Y.Offset) * easedT
            )
            if t >= 1 then connection:Disconnect() end
        end)
        notif.PositionY = newY
    end
    
    table.insert(activeNotifications, {Frame = NotifFrame, Gui = NotifGui, PositionY = -70})
    
    if #activeNotifications > 5 then
        local oldest = table.remove(activeNotifications, 1)
        oldest.Gui:Destroy()
    end
    
    local startPosIn = UDim2.new(1, 260, 1, -70)
    local endPosIn = UDim2.new(1, -260, 1, -70)
    local elapsedIn = 0
    local durationIn = 0.5
    local connectionIn
    connectionIn = RunService.RenderStepped:Connect(function(dt)
        elapsedIn = elapsedIn + dt
        local t = math.clamp(elapsedIn / durationIn, 0, 1)
        local easedT = t * t * (3 - 2 * t)
        NotifFrame.Position = UDim2.new(
            startPosIn.X.Scale, startPosIn.X.Offset + (endPosIn.X.Offset - startPosIn.X.Offset) * easedT,
            startPosIn.Y.Scale, startPosIn.Y.Offset + (endPosIn.Y.Offset - startPosIn.Y.Offset) * easedT
        )
        if t >= 1 then connectionIn:Disconnect() end
    end)
    
    wait(3)
    
    local startPosOut = NotifFrame.Position
    local endPosOut = UDim2.new(1, 260, 1, -70)
    local elapsedOut = 0
    local durationOut = 0.5
    local connectionOut
    connectionOut = RunService.RenderStepped:Connect(function(dt)
        elapsedOut = elapsedOut + dt
        local t = math.clamp(elapsedOut / durationOut, 0, 1)
        local easedT = t * t * (3 - 2 * t)
        NotifFrame.Position = UDim2.new(
            startPosOut.X.Scale, startPosOut.X.Offset + (endPosOut.X.Offset - startPosOut.X.Offset) * easedT,
            startPosOut.Y.Scale, startPosOut.Y.Offset + (endPosOut.Y.Offset - startPosOut.Y.Offset) * easedT
        )
        if t >= 1 then
            connectionOut:Disconnect()
            for i, notif in ipairs(activeNotifications) do
                if notif.Frame == NotifFrame then
                    table.remove(activeNotifications, i)
                    break
                end
            end
            for i, notif in ipairs(activeNotifications) do
                local newY = -70 - ((i - 1) * 65)
                local startPosDown = notif.Frame.Position
                local endPosDown = UDim2.new(1, -260, 1, newY)
                local elapsedDown = 0
                local durationDown = 0.3
                local connectionDown
                connectionDown = RunService.RenderStepped:Connect(function(dt)
                    elapsedDown = elapsedDown + dt
                    local t = math.clamp(elapsedDown / durationDown, 0, 1)
                    local easedT = t * t * (3 - 2 * t)
                    notif.Frame.Position = UDim2.new(
                        startPosDown.X.Scale, startPosDown.X.Offset + (endPosDown.X.Offset - startPosDown.X.Offset) * easedT,
                        startPosDown.Y.Scale, startPosDown.Y.Offset + (endPosDown.Y.Offset - startPosDown.Y.Offset) * easedT
                    )
                    if t >= 1 then connectionDown:Disconnect() end
                end)
                notif.PositionY = newY
            end
            NotifGui:Destroy()
        end
    end)
end

QuickHacksUI.notifyUI = createCustomNotification

local function createLoadingScreen()
    local LoadingGui = Instance.new("ScreenGui")
    LoadingGui.Name = "LoadingScreen"
    LoadingGui.Parent = PlayerGui
    
    local LoadingFrame = Instance.new("Frame")
    LoadingFrame.Size = UDim2.new(0, 200, 0, 200)
    LoadingFrame.Position = UDim2.new(0.5, -100, 0.5, -100)
    LoadingFrame.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    LoadingFrame.BorderSizePixel = 0
    LoadingFrame.Parent = LoadingGui
    
    local Corner = Instance.new("UICorner")
    Corner.CornerRadius = UDim.new(0, 10)
    Corner.Parent = LoadingFrame
    
    local Stroke = Instance.new("UIStroke")
    Stroke.Color = Color3.fromRGB(150, 50, 255)
    Stroke.Thickness = 2
    Stroke.Transparency = 0.2
    Stroke.Parent = LoadingFrame
    
    local AnimatedLabel = Instance.new("TextLabel")
    AnimatedLabel.Size = UDim2.new(0, 180, 0, 30)
    AnimatedLabel.Position = UDim2.new(0.5, -90, 0, 10)
    AnimatedLabel.BackgroundTransparency = 1
    AnimatedLabel.Text = ""
    AnimatedLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    AnimatedLabel.TextSize = 16
    AnimatedLabel.Font = Enum.Font.GothamBold
    AnimatedLabel.TextXAlignment = Enum.TextXAlignment.Center
    AnimatedLabel.Parent = LoadingFrame
    
    local Logo = Instance.new("ImageLabel")
    Logo.Size = UDim2.new(0, 100, 0, 100)
    Logo.Position = UDim2.new(0.5, -50, 0.5, -50)
    Logo.BackgroundTransparency = 1
    Logo.Image = "rbxassetid://YOUR_LOGO_ID"
    Logo.Parent = LoadingFrame
    
    local function animateTitle()
        while true do
            local text = "Made by oz|"
            for i = #text, 1, -1 do
                AnimatedLabel.Text = string.sub(text, 1, i) .. "|"
                wait(0.05)
            end
            AnimatedLabel.Text = "|"
            wait(0.1)
            for i = 1, #text do
                AnimatedLabel.Text = string.sub(text, 1, i) .. "|"
                wait(0.05)
            end
            AnimatedLabel.Text = text
            wait(0.3)
        end
    end
    
    local function animateStroke()
        while true do
            local hue = 0
            while hue < 1 do
                hue = hue + 0.01
                Stroke.Color = Color3.fromHSV(hue, 1, 1)
                wait(0.05)
            end
        end
    end
    
    coroutine.wrap(animateTitle)()
    coroutine.wrap(animateStroke)()
    
    return LoadingGui
end

local function addProgressIndicator(loadingFrame)
    local ProgressLabel = Instance.new("TextLabel")
    ProgressLabel.Size = UDim2.new(0, 180, 0, 20)
    ProgressLabel.Position = UDim2.new(0.5, -90, 1, -40)
    ProgressLabel.BackgroundTransparency = 1
    ProgressLabel.Text = "Loading UI ."
    ProgressLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
    ProgressLabel.TextSize = 14
    ProgressLabel.Font = Enum.Font.Gotham
    ProgressLabel.TextXAlignment = Enum.TextXAlignment.Left
    ProgressLabel.Parent = loadingFrame
    
    local PercentLabel = Instance.new("TextLabel")
    PercentLabel.Size = UDim2.new(0, 50, 0, 20)
    PercentLabel.Position = UDim2.new(0.5, 40, 1, -40)
    PercentLabel.BackgroundTransparency = 1
    PercentLabel.Text = "0%"
    PercentLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
    PercentLabel.TextSize = 14
    PercentLabel.Font = Enum.Font.Gotham
    PercentLabel.TextXAlignment = Enum.TextXAlignment.Right
    PercentLabel.Parent = loadingFrame
    
    local function animateDots()
        local dots = 0
        while true do
            dots = (dots + 1) % 4
            ProgressLabel.Text = "Loading UI " .. string.rep(".", dots)
            wait(0.3)
        end
    end
    
    local function updateProgress(percent)
        PercentLabel.Text = tostring(math.floor(percent)) .. "%"
    end
    
    coroutine.wrap(animateDots)()
    
    return updateProgress
end

local originalCreateLoadingScreen = createLoadingScreen
QuickHacksUI.createLoadingScreen = function()
    local loadingGui = originalCreateLoadingScreen()
    local loadingFrame = loadingGui.LoadingFrame
    local updateProgress = addProgressIndicator(loadingFrame)
    return loadingGui, updateProgress
end

function QuickHacksUI:Window(text, preset, closebind)
    CloseBind = closebind or Enum.KeyCode.RightControl
    PresetColor = preset or Color3.fromRGB(44, 120, 224)
    local fs = false
    local Main = Instance.new("Frame")
    local MainCorner = Instance.new("UICorner")
    local TabHold = Instance.new("Frame")
    local TabHoldStroke = Instance.new("UIStroke")
    local TabHoldLayout = Instance.new("UIListLayout")
    local Title = Instance.new("TextLabel")
    local TabFolder = Instance.new("Folder")
    local DragFrame = Instance.new("Frame")
    local MobileBtn = Instance.new("ImageButton")
    local CloseBtn = Instance.new("TextButton")
    local Mobilebt = Instance.new("UICorner")

    Main.Name = "Main"
    Main.Parent = ui
    Main.AnchorPoint = Vector2.new(0.5, 0.5)
    Main.BackgroundColor3 = CurrentUIBackgroundColor
    Main.BorderSizePixel = 0
    Main.Position = UDim2.new(0.5, 0, 0.5, 0)
    Main.Size = UDim2.new(0, 0, 0, 0)
    Main.ClipsDescendants = true
    Main.Visible = true

    MainCorner.CornerRadius = UDim.new(0, 12)
    MainCorner.Parent = Main

    TabHold.Name = "TabHold"
    TabHold.Parent = Main
    TabHold.BackgroundTransparency = 1
    TabHold.Position = UDim2.new(0.034, 0, 0.147, 0)
    TabHold.Size = UDim2.new(0, 107, 0, 254)

    TabHoldStroke.Parent = TabHold
    TabHoldStroke.Color = Color3.fromRGB(0, 0, 0)
    TabHoldStroke.Thickness = 1.5
    TabHoldStroke.Transparency = 0.5

    TabHoldLayout.Name = "TabHoldLayout"
    TabHoldLayout.Parent = TabHold
    TabHoldLayout.SortOrder = Enum.SortOrder.LayoutOrder
    TabHoldLayout.Padding = UDim.new(0, 11)

    Title.Name = "Title"
    Title.Parent = Main
    Title.BackgroundTransparency = 1
    Title.Position = UDim2.new(0.034, 0, 0.056, 0)
    Title.Size = UDim2.new(0, 200, 0, 23)
    Title.Font = Enum.Font.GothamSemibold
    Title.Text = text
    Title.TextColor3 = Color3.fromRGB(68, 68, 68)
    Title.TextSize = 12
    Title.TextXAlignment = Enum.TextXAlignment.Left

    DragFrame.Name = "DragFrame"
    DragFrame.Parent = Main
    DragFrame.BackgroundTransparency = 1
    DragFrame.Size = UDim2.new(0, 560, 0, 41)

    CloseBtn.Name = "CloseBtn"
    CloseBtn.Parent = Main
    CloseBtn.BackgroundTransparency = 1
    CloseBtn.Position = UDim2.new(0.95, 0, 0.056, 0)
    CloseBtn.Size = UDim2.new(0, 20, 0, 20)
    CloseBtn.Font = Enum.Font.GothamBold
    CloseBtn.Text = "X"
    CloseBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
    CloseBtn.TextSize = 16

    Mobilebt.CornerRadius = UDim.new(1, 10)
    Mobilebt.Parent = MobileBtn

    if UserInputService.TouchEnabled then
        MobileBtn.Name = "MobileBtn"
        MobileBtn.Parent = ui
        MobileBtn.BackgroundTransparency = 1
        MobileBtn.Position = UDim2.new(0.949999988, -74, 0.5, -42)
        MobileBtn.Size = UDim2.new(0, 65, 0, 65)
        MobileBtn.Image = "rbxassetid://130039636229325"
        MakeDraggable(MobileBtn, MobileBtn)
        MobileBtn.MouseButton1Click:Connect(function()
            if Main.Size.X.Offset > 0 then
                local elapsed = 0
                local duration = 0.5
                local startSize = Main.Size
                local endSize = UDim2.new(0, 0, 0, 0)
                local connection
                connection = RunService.RenderStepped:Connect(function(dt)
                    elapsed = elapsed + dt
                    local t = math.clamp(elapsed / duration, 0, 1)
                    local easedT = t * t * (3 - 2 * t)
                    Main.Size = UDim2.new(
                        startSize.X.Scale, startSize.X.Offset + (endSize.X.Offset - startSize.X.Offset) * easedT,
                        startSize.Y.Scale, startSize.Y.Offset + (endSize.Y.Offset - startSize.Y.Offset) * easedT
                    )
                    if t >= 1 then connection:Disconnect() end
                end)
            else
                Main.Visible = true
                local elapsed = 0
                local duration = 0.5
                local startSize = Main.Size
                local endSize = UDim2.new(0, 560, 0, 319)
                local connection
                connection = RunService.RenderStepped:Connect(function(dt)
                    elapsed = elapsed + dt
                    local t = math.clamp(elapsed / duration, 0, 1)
                    local easedT = t * t * (3 - 2 * t)
                    Main.Size = UDim2.new(
                        startSize.X.Scale, startSize.X.Offset + (endSize.X.Offset - startSize.X.Offset) * easedT,
                        startSize.Y.Scale, startSize.Y.Offset + (endSize.Y.Offset - startSize.Y.Offset) * easedT
                    )
                    if t >= 1 then connection:Disconnect() end
                end)
            end
        end)
    end

    local elapsed = 0
    local duration = 0.6
    local startSize = Main.Size
    local endSize = UDim2.new(0, 560, 0, 319)
    local connection
    connection = RunService.RenderStepped:Connect(function(dt)
        elapsed = elapsed + dt
        local t = math.clamp(elapsed / duration, 0, 1)
        local easedT = t * t * (3 - 2 * t)
        Main.Size = UDim2.new(
            startSize.X.Scale, startSize.X.Offset + (endSize.X.Offset - startSize.X.Offset) * easedT,
            startSize.Y.Scale, startSize.Y.Offset + (endSize.Y.Offset - startSize.Y.Offset) * easedT
        )
        if t >= 1 then connection:Disconnect() end
    end)

    MakeDraggable(DragFrame, Main)

    CloseBtn.MouseButton1Click:Connect(function()
        QuickHacksUI:notifyButton("Close UI", "Are you sure?", "Yes", "No")
    end)

    local uitoggled = false
    UserInputService.InputBegan:Connect(function(io, p)
        if io.KeyCode == CloseBind then
            if uitoggled == false then
                local elapsed = 0
                local duration = 0.5
                local startSize = Main.Size
                local endSize = UDim2.new(0, 0, 0, 0)
                local connection
                connection = RunService.RenderStepped:Connect(function(dt)
                    elapsed = elapsed + dt
                    local t = math.clamp(elapsed / duration, 0, 1)
                    local easedT = t * t * (3 - 2 * t)
                    Main.Size = UDim2.new(
                        startSize.X.Scale, startSize.X.Offset + (endSize.X.Offset - startSize.X.Offset) * easedT,
                        startSize.Y.Scale, startSize.Y.Offset + (endSize.Y.Offset - startSize.Y.Offset) * easedT
                    )
                    if t >= 1 then connection:Disconnect() end
                end)
                uitoggled = true
            else
                Main.Visible = true
                local elapsed = 0
                local duration = 0.5
                local startSize = Main.Size
                local endSize = UDim2.new(0, 560, 0, 319)
                local connection
                connection = RunService.RenderStepped:Connect(function(dt)
                    elapsed = elapsed + dt
                    local t = math.clamp(elapsed / duration, 0, 1)
                    local easedT = t * t * (3 - 2 * t)
                    Main.Size = UDim2.new(
                        startSize.X.Scale, startSize.X.Offset + (endSize.X.Offset - startSize.X.Offset) * easedT,
                        startSize.Y.Scale, startSize.Y.Offset + (endSize.Y.Offset - startSize.Y.Offset) * easedT
                    )
                    if t >= 1 then connection:Disconnect() end
                end)
                uitoggled = false
            end
        end
    end)

    TabFolder.Name = "TabFolder"
    TabFolder.Parent = Main

    function QuickHacksUI:ChangePresetColor(toch)
        PresetColor = toch
    end

    function QuickHacksUI:notifyButton(texttitle, textdesc, textbtn1, textbtn2)
        local NotificationHold = Instance.new("TextButton")
        local NotificationFrame = Instance.new("Frame")
        local YesBtn = Instance.new("TextButton")
        local YesBtnCorner = Instance.new("UICorner")
        local YesBtnTitle = Instance.new("TextLabel")
        local NoBtn = Instance.new("TextButton")
        local NoBtnCorner = Instance.new("UICorner")
        local NoBtnTitle = Instance.new("TextLabel")
        local NotificationTitle = Instance.new("TextLabel")
        local NotificationDesc = Instance.new("TextLabel")
        local NotificationCorner = Instance.new("UICorner")
        local NotificationStroke = Instance.new("UIStroke")
        local NF = Instance.new("UICorner")

        NotificationHold.Name = "NotificationHold"
        NotificationHold.Parent = Main
        NotificationHold.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
        NotificationHold.BackgroundTransparency = 1
        NotificationHold.BorderSizePixel = 0
        NotificationHold.Size = UDim2.new(0, 560, 0, 319)
        NotificationHold.AutoButtonColor = false
        NotificationHold.Font = Enum.Font.SourceSans
        NotificationHold.Text = ""
        NotificationHold.TextColor3 = Color3.fromRGB(0, 0, 0)

        NotificationCorner.CornerRadius = UDim.new(0, 12)
        NotificationCorner.Parent = NotificationHold

        local elapsedHold = 0
        local durationHold = 0.3
        local connectionHold
        connectionHold = RunService.RenderStepped:Connect(function(dt)
            elapsedHold = elapsedHold + dt
            local t = math.clamp(elapsedHold / durationHold, 0, 1)
            local easedT = t * t * (3 - 2 * t)
            NotificationHold.BackgroundTransparency = 1 - (0.4 * easedT)
            if t >= 1 then connectionHold:Disconnect() end
        end)

        wait(0.4)

        NotificationFrame.Name = "NotificationFrame"
        NotificationFrame.Parent = NotificationHold
        NotificationFrame.AnchorPoint = Vector2.new(0.5, 0.5)
        NotificationFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
        NotificationFrame.BorderSizePixel = 0
        NotificationFrame.ClipsDescendants = true
        NotificationFrame.Position = UDim2.new(0.5, 0, 0.5, 0)
        NotificationFrame.Size = UDim2.new(0, 0, 0, 0)

        local elapsedFrame = 0
        local durationFrame = 0.6
        local startSizeFrame = NotificationFrame.Size
        local endSizeFrame = UDim2.new(0, 240, 0, 220)
        local connectionFrame
        connectionFrame = RunService.RenderStepped:Connect(function(dt)
            elapsedFrame = elapsedFrame + dt
            local t = math.clamp(elapsedFrame / durationFrame, 0, 1)
            local easedT = t * t * (3 - 2 * t)
            NotificationFrame.Size = UDim2.new(
                startSizeFrame.X.Scale, startSizeFrame.X.Offset + (endSizeFrame.X.Offset - startSizeFrame.X.Offset) * easedT,
                startSizeFrame.Y.Scale, startSizeFrame.Y.Offset + (endSizeFrame.Y.Offset - startSizeFrame.Y.Offset) * easedT
            )
            if t >= 1 then connectionFrame:Disconnect() end
        end)

        NF.CornerRadius = UDim.new(0, 12)
        NF.Parent = NotificationFrame

        NotificationStroke.Color = Color3.fromRGB(100, 100, 100)
        NotificationStroke.Thickness = 1.5
        NotificationStroke.Transparency = 0.3
        NotificationStroke.Parent = NotificationFrame

        YesBtn.Name = "YesBtn"
        YesBtn.Parent = NotificationFrame
        YesBtn.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
        YesBtn.Position = UDim2.new(0.1, 0, 0.75, 0)
        YesBtn.Size = UDim2.new(0, 100, 0, 40)
        YesBtn.AutoButtonColor = false
        YesBtn.Font = Enum.Font.SourceSans
        YesBtn.Text = ""

        YesBtnCorner.CornerRadius = UDim.new(0, 6)
        YesBtnCorner.Parent = YesBtn

        YesBtnTitle.Name = "YesBtnTitle"
        YesBtnTitle.Parent = YesBtn
        YesBtnTitle.BackgroundTransparency = 1
        YesBtnTitle.Size = UDim2.new(0, 100, 0, 40)
        YesBtnTitle.Font = Enum.Font.GothamBold
        YesBtnTitle.Text = textbtn1
        YesBtnTitle.TextColor3 = Color3.fromRGB(200, 200, 200)
        YesBtnTitle.TextSize = 16

        NoBtn.Name = "NoBtn"
        NoBtn.Parent = NotificationFrame
        NoBtn.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
        NoBtn.Position = UDim2.new(0.55, 0, 0.75, 0)
        NoBtn.Size = UDim2.new(0, 100, 0, 40)
        NoBtn.AutoButtonColor = false
        NoBtn.Font = Enum.Font.SourceSans
        NoBtn.Text = ""

        NoBtnCorner.CornerRadius = UDim.new(0, 6)
        NoBtnCorner.Parent = NoBtn

        NoBtnTitle.Name = "NoBtnTitle"
        NoBtnTitle.Parent = NoBtn
        NoBtnTitle.BackgroundTransparency = 1
        NoBtnTitle.Size = UDim2.new(0, 100, 0, 40)
        NoBtnTitle.Font = Enum.Font.GothamBold
        NoBtnTitle.Text = textbtn2
        NoBtnTitle.TextColor3 = Color3.fromRGB(200, 200, 200)
        NoBtnTitle.TextSize = 16

        NotificationTitle.Name = "NotificationTitle"
        NotificationTitle.Parent = NotificationFrame
        NotificationTitle.BackgroundTransparency = 1
        NotificationTitle.Position = UDim2.new(0.1, 0, 0.1, 0)
        NotificationTitle.Size = UDim2.new(0, 200, 0, 30)
        NotificationTitle.Font = Enum.Font.GothamBold
        NotificationTitle.Text = texttitle
        NotificationTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
        NotificationTitle.TextSize = 20
        NotificationTitle.TextXAlignment = Enum.TextXAlignment.Left

        NotificationDesc.Name = "NotificationDesc"
        NotificationDesc.Parent = NotificationFrame
        NotificationDesc.BackgroundTransparency = 1
        NotificationDesc.Position = UDim2.new(0.1, 0, 0.25, 0)
        NotificationDesc.Size = UDim2.new(0, 200, 0, 120)
        NotificationDesc.Font = Enum.Font.Gotham
        NotificationDesc.Text = textdesc
        NotificationDesc.TextColor3 = Color3.fromRGB(180, 180, 180)
        NotificationDesc.TextSize = 16
        NotificationDesc.TextWrapped = true
        NotificationDesc.TextXAlignment = Enum.TextXAlignment.Left
        NotificationDesc.TextYAlignment = Enum.TextYAlignment.Top

        YesBtn.MouseEnter:Connect(function()
            local elapsed = 0
            local duration = 0.3
            local startColor = YesBtn.BackgroundColor3
            local endColor = Color3.fromRGB(60, 60, 60)
            local connection
            connection = RunService.RenderStepped:Connect(function(dt)
                elapsed = elapsed + dt
                local t = math.clamp(elapsed / duration, 0, 1)
                local easedT = t * t * (3 - 2 * t)
                YesBtn.BackgroundColor3 = Color3.new(
                    startColor.R + (endColor.R - startColor.R) * easedT,
                    startColor.G + (endColor.G - startColor.G) * easedT,
                    startColor.B + (endColor.B - startColor.B) * easedT
                )
                if t >= 1 then connection:Disconnect() end
            end)
        end)

        YesBtn.MouseLeave:Connect(function()
            local elapsed = 0
            local duration = 0.2
            local startColor = YesBtn.BackgroundColor3
            local endColor = Color3.fromRGB(50, 50, 50)
            local connection
            connection = RunService.RenderStepped:Connect(function(dt)
                elapsed = elapsed + dt
                local t = math.clamp(elapsed / duration, 0, 1)
                local easedT = t * t * (3 - 2 * t)
                YesBtn.BackgroundColor3 = Color3.new(
                    startColor.R + (endColor.R - startColor.R) * easedT,
                    startColor.G + (endColor.G - startColor.G) * easedT,
                    startColor.B + (endColor.B - startColor.B) * easedT
                )
                if t >= 1 then connection:Disconnect() end
            end)
        end)

        NoBtn.MouseEnter:Connect(function()
            local elapsed = 0
            local duration = 0.3
            local startColor = NoBtn.BackgroundColor3
            local endColor = Color3.fromRGB(60, 60, 60)
            local connection
            connection = RunService.RenderStepped:Connect(function(dt)
                elapsed = elapsed + dt
                local t = math.clamp(elapsed / duration, 0, 1)
                local easedT = t * t * (3 - 2 * t)
                NoBtn.BackgroundColor3 = Color3.new(
                    startColor.R + (endColor.R - startColor.R) * easedT,
                    startColor.G + (endColor.G - startColor.G) * easedT,
                    startColor.B + (endColor.B - startColor.B) * easedT
                )
                if t >= 1 then connection:Disconnect() end
            end)
        end)

        NoBtn.MouseLeave:Connect(function()
            local elapsed = 0
            local duration = 0.2
            local startColor = NoBtn.BackgroundColor3
            local endColor = Color3.fromRGB(50, 50, 50)
            local connection
            connection = RunService.RenderStepped:Connect(function(dt)
                elapsed = elapsed + dt
                local t = math.clamp(elapsed / duration, 0, 1)
                local easedT = t * t * (3 - 2 * t)
                NoBtn.BackgroundColor3 = Color3.new(
                    startColor.R + (endColor.R - startColor.R) * easedT,
                    startColor.G + (endColor.G - startColor.G) * easedT,
                    startColor.B + (endColor.B - startColor.B) * easedT
                )
                if t >= 1 then connection:Disconnect() end
            end)
        end)

        YesBtn.MouseButton1Click:Connect(function()
            local elapsedFrame = 0
            local durationFrame = 0.6
            local startSizeFrame = NotificationFrame.Size
            local endSizeFrame = UDim2.new(0, 0, 0, 0)
            local connectionFrame
            connectionFrame = RunService.RenderStepped:Connect(function(dt)
                elapsedFrame = elapsedFrame + dt
                local t = math.clamp(elapsedFrame / durationFrame, 0, 1)
                local easedT = t * t * (3 - 2 * t)
                NotificationFrame.Size = UDim2.new(
                    startSizeFrame.X.Scale, startSizeFrame.X.Offset + (endSizeFrame.X.Offset - startSizeFrame.X.Offset) * easedT,
                    startSizeFrame.Y.Scale, startSizeFrame.Y.Offset + (endSizeFrame.Y.Offset - startSizeFrame.Y.Offset) * easedT
                )
                if t >= 1 then connectionFrame:Disconnect() end
            end)
            wait(0.4)
            local elapsedHold = 0
            local durationHold = 0.3
            local connectionHold
            connectionHold = RunService.RenderStepped:Connect(function(dt)
                elapsedHold = elapsedHold + dt
                local t = math.clamp(elapsedHold / durationHold, 0, 1)
                local easedT = t * t * (3 - 2 * t)
                NotificationHold.BackgroundTransparency = 0.6 + (0.4 * easedT)
                if t >= 1 then connectionHold:Disconnect() end
            end)
            wait(0.3)
            ui:Destroy()
            NotificationHold:Destroy()
        end)

        NoBtn.MouseButton1Click:Connect(function()
            local elapsedFrame = 0
            local durationFrame = 0.6
            local startSizeFrame = NotificationFrame.Size
            local endSizeFrame = UDim2.new(0, 0, 0, 0)
            local connectionFrame
            connectionFrame = RunService.RenderStepped:Connect(function(dt)
                elapsedFrame = elapsedFrame + dt
                local t = math.clamp(elapsedFrame / durationFrame, 0, 1)
                local easedT = t * t * (3 - 2 * t)
                NotificationFrame.Size = UDim2.new(
                    startSizeFrame.X.Scale, startSizeFrame.X.Offset + (endSizeFrame.X.Offset - startSizeFrame.X.Offset) * easedT,
                    startSizeFrame.Y.Scale, startSizeFrame.Y.Offset + (endSizeFrame.Y.Offset - startSizeFrame.Y.Offset) * easedT
                )
                if t >= 1 then connectionFrame:Disconnect() end
            end)
            wait(0.4)
            local elapsedHold = 0
            local durationHold = 0.3
            local connectionHold
            connectionHold = RunService.RenderStepped:Connect(function(dt)
                elapsedHold = elapsedHold + dt
                local t = math.clamp(elapsedHold / durationHold, 0, 1)
                local easedT = t * t * (3 - 2 * t)
                NotificationHold.BackgroundTransparency = 0.6 + (0.4 * easedT)
                if t >= 1 then connectionHold:Disconnect() end
            end)
            wait(0.3)
            NotificationHold:Destroy()
        end)
    end

    local tabhold = {}
    local settingsTab = nil

    local function createSettingsTab()
        local TabBtn = Instance.new("TextButton")
        local TabTitle = Instance.new("TextLabel")
        local TabBtnIndicator = Instance.new("Frame")
        local TabBtnIndicatorCorner = Instance.new("UICorner")

        TabBtn.Name = "TabBtn"
        TabBtn.Parent = TabHold
        TabBtn.BackgroundTransparency = 1
        TabBtn.Size = UDim2.new(0, 107, 0, 21)
        TabBtn.Font = Enum.Font.SourceSans
        TabBtn.Text = ""

        TabTitle.Name = "TabTitle"
        TabTitle.Parent = TabBtn
        TabTitle.BackgroundTransparency = 1
        TabTitle.Size = UDim2.new(0, 107, 0, 21)
        TabTitle.Font = Enum.Font.Gotham
        TabTitle.Text = "Settings"
        TabTitle.TextColor3 = Color3.fromRGB(150, 150, 150)
        TabTitle.TextSize = 14
        TabTitle.TextXAlignment = Enum.TextXAlignment.Left

        TabBtnIndicator.Name = "TabBtnIndicator"
        TabBtnIndicator.Parent = TabBtn
        TabBtnIndicator.BackgroundColor3 = PresetColor
        TabBtnIndicator.BorderSizePixel = 0
        TabBtnIndicator.Position = UDim2.new(0, 0, 1, 0)
        TabBtnIndicator.Size = UDim2.new(0, 0, 0, 2)

        TabBtnIndicatorCorner.Parent = TabBtnIndicator

        coroutine.wrap(function()
            while wait() do TabBtnIndicator.BackgroundColor3 = PresetColor end
        end)()

        local Tab = Instance.new("ScrollingFrame")
        local TabStroke = Instance.new("UIStroke")
        local TabLayout = Instance.new("UIListLayout")

        Tab.Name = "Tab"
        Tab.Parent = TabFolder
        Tab.Active = true
        Tab.BackgroundTransparency = 1
        Tab.BorderSizePixel = 0
        Tab.Position = UDim2.new(0.314, 0, 0.147, 0)
        Tab.Size = UDim2.new(0, 373, 0, 254)
        Tab.CanvasSize = UDim2.new(0, 0, 0, 0)
        Tab.ScrollBarThickness = 3
        Tab.Visible = false

        TabStroke.Parent = Tab
        TabStroke.Color = Color3.fromRGB(0, 0, 0)
        TabStroke.Thickness = 2.5
        TabStroke.Transparency = 0.5

        TabLayout.Name = "TabLayout"
        TabLayout.Parent = Tab
        TabLayout.SortOrder = Enum.SortOrder.LayoutOrder
        TabLayout.Padding = UDim.new(0, 6)

        TabBtn.MouseButton1Click:Connect(function()
            for _, v in next, TabFolder:GetChildren() do
                if v.Name == "Tab" then v.Visible = false end
                Tab.Visible = true
            end
            for _, v in next, TabHold:GetChildren() do
                if v.Name == "TabBtn" then
                    local elapsedIndicator = 0
                    local durationIndicator = 0.2
                    local startSizeIndicator = v.TabBtnIndicator.Size
                    local endSizeIndicator = UDim2.new(0, 0, 0, 2)
                    local connectionIndicator
                    connectionIndicator = RunService.RenderStepped:Connect(function(dt)
                        elapsedIndicator = elapsedIndicator + dt
                        local t = math.clamp(elapsedIndicator / durationIndicator, 0, 1)
                        local easedT = t * t * (3 - 2 * t)
                        v.TabBtnIndicator.Size = UDim2.new(
                            startSizeIndicator.X.Scale, startSizeIndicator.X.Offset + (endSizeIndicator.X.Offset - startSizeIndicator.X.Offset) * easedT,
                            startSizeIndicator.Y.Scale, startSizeIndicator.Y.Offset + (endSizeIndicator.Y.Offset - startSizeIndicator.Y.Offset) * easedT
                        )
                        if t >= 1 then connectionIndicator:Disconnect() end
                    end)

                    local elapsedIndicator2 = 0
                    local durationIndicator2 = 0.2
                    local startSizeIndicator2 = TabBtnIndicator.Size
                    local endSizeIndicator2 = UDim2.new(0, 13, 0, 2)
                    local connectionIndicator2
                    connectionIndicator2 = RunService.RenderStepped:Connect(function(dt)
                        elapsedIndicator2 = elapsedIndicator2 + dt
                        local t = math.clamp(elapsedIndicator2 / durationIndicator2, 0, 1)
                        local easedT = t * t * (3 - 2 * t)
                        TabBtnIndicator.Size = UDim2.new(
                            startSizeIndicator2.X.Scale, startSizeIndicator2.X.Offset + (endSizeIndicator2.X.Offset - startSizeIndicator2.X.Offset) * easedT,
                            startSizeIndicator2.Y.Scale, startSizeIndicator2.Y.Offset + (endSizeIndicator2.Y.Offset - startSizeIndicator2.Y.Offset) * easedT
                        )
                        if t >= 1 then connectionIndicator2:Disconnect() end
                    end)

                    local elapsedTitle = 0
                    local durationTitle = 0.3
                    local startColorTitle = v.TabTitle.TextColor3
                    local endColorTitle = Color3.fromRGB(150, 150, 150)
                    local connectionTitle
                    connectionTitle = RunService.RenderStepped:Connect(function(dt)
                        elapsedTitle = elapsedTitle + dt
                        local t = math.clamp(elapsedTitle / durationTitle, 0, 1)
                        local easedT = t * t * (3 - 2 * t)
                        v.TabTitle.TextColor3 = Color3.new(
                            startColorTitle.R + (endColorTitle.R - startColorTitle.R) * easedT,
                            startColorTitle.G + (endColorTitle.G - startColorTitle.G) * easedT,
                            startColorTitle.B + (endColorTitle.B - startColorTitle.B) * easedT
                        )
                        if t >= 1 then connectionTitle:Disconnect() end
                    end)

                    local elapsedTitle2 = 0
                    local durationTitle2 = 0.3
                    local startColorTitle2 = TabTitle.TextColor3
                    local endColorTitle2 = Color3.fromRGB(255, 255, 255)
                    local connectionTitle2
                    connectionTitle2 = RunService.RenderStepped:Connect(function(dt)
                        elapsedTitle2 = elapsedTitle2 + dt
                        local t = math.clamp(elapsedTitle2 / durationTitle2, 0, 1)
                        local easedT = t * t * (3 - 2 * t)
                        TabTitle.TextColor3 = Color3.new(
                            startColorTitle2.R + (endColorTitle2.R - startColorTitle2.R) * easedT,
                            startColorTitle2.G + (endColorTitle2.G - startColorTitle2.G) * easedT,
                            startColorTitle2.B + (endColorTitle2.B - startColorTitle2.B) * easedT
                        )
                        if t >= 1 then connectionTitle2:Disconnect() end
                    end)
                end
            end
        end)

        local tabcontent = {}
        function tabcontent:Button(text, callback)
            local Button = Instance.new("TextButton")
            local ButtonCorner = Instance.new("UICorner")
            local ButtonTitle = Instance.new("TextLabel")
            local ButtonStroke = Instance.new("UIStroke")

            Button.Name = "Button"
            Button.Parent = Tab
            Button.BackgroundColor3 = CurrentUIBackgroundColor
            Button.Size = UDim2.new(0, 363, 0, 42)
            Button.AutoButtonColor = false
            Button.Font = Enum.Font.SourceSans
            Button.Text = ""

            ButtonCorner.CornerRadius = UDim.new(0, 5)
            ButtonCorner.Parent = Button

            ButtonStroke.Parent = Button
            ButtonStroke.Thickness = 1
            ButtonStroke.Transparency = 0.3
            ButtonStroke.Color = Color3.fromRGB(0, 0, 0)
            ButtonStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border

            ButtonTitle.Name = "ButtonTitle"
            ButtonTitle.Parent = Button
            ButtonTitle.BackgroundTransparency = 1
            ButtonTitle.Position = UDim2.new(0.036, 0, 0, 0)
            ButtonTitle.Size = UDim2.new(0, 187, 0, 42)
            ButtonTitle.Font = Enum.Font.Gotham
            ButtonTitle.Text = text or "Unnamed Button"
            ButtonTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
            ButtonTitle.TextSize = 14
            ButtonTitle.TextXAlignment = Enum.TextXAlignment.Left

            Button.MouseEnter:Connect(function()
                local elapsed = 0
                local duration = 0.3
                local startColor = Button.BackgroundColor3
                local endColor = Color3.fromRGB(37, 37, 37)
                local connection
                connection = RunService.RenderStepped:Connect(function(dt)
                    elapsed = elapsed + dt
                    local t = math.clamp(elapsed / duration, 0, 1)
                    local easedT = t * t * (3 - 2 * t)
                    Button.BackgroundColor3 = Color3.new(
                        startColor.R + (endColor.R - startColor.R) * easedT,
                        startColor.G + (endColor.G - startColor.G) * easedT,
                        startColor.B + (endColor.B - startColor.B) * easedT
                    )
                    if t >= 1 then connection:Disconnect() end
                end)
            end)

            Button.MouseLeave:Connect(function()
                local elapsed = 0
                local duration = 0.2
                local startColor = Button.BackgroundColor3
                local endColor = CurrentUIBackgroundColor
                local connection
                connection = RunService.RenderStepped:Connect(function(dt)
                    elapsed = elapsed + dt
                    local t = math.clamp(elapsed / duration, 0, 1)
                    local easedT = t * t * (3 - 2 * t)
                    Button.BackgroundColor3 = Color3.new(
                        startColor.R + (endColor.R - startColor.R) * easedT,
                        startColor.G + (endColor.G - startColor.G) * easedT,
                        startColor.B + (endColor.B - startColor.B) * easedT
                    )
                    if t >= 1 then connection:Disconnect() end
                end)
            end)

            Button.MouseButton1Click:Connect(function()
                local elapsedIn = 0
                local durationIn = 0.2
                local startPosIn = Button.Position
                local endPosIn = UDim2.new(0.02, 0, 0, 0)
                local connectionIn
                connectionIn = RunService.RenderStepped:Connect(function(dt)
                    elapsedIn = elapsedIn + dt
                    local t = math.clamp(elapsedIn / durationIn, 0, 1)
                    local easedT = t * t * (3 - 2 * t)
                    Button.Position = UDim2.new(
                        startPosIn.X.Scale + (endPosIn.X.Scale - startPosIn.X.Scale) * easedT,
                        startPosIn.X.Offset + (endPosIn.X.Offset - startPosIn.X.Offset) * easedT,
                        startPosIn.Y.Scale, startPosIn.Y.Offset
                    )
                    if t >= 1 then connectionIn:Disconnect() end
                end)
                wait(0.5)
                local elapsedOut = 0
                local durationOut = 0.2
                local startPosOut = Button.Position
                local endPosOut = UDim2.new(0, 0, 0, 0)
                local connectionOut
                connectionOut = RunService.RenderStepped:Connect(function(dt)
                    elapsedOut = elapsedOut + dt
                    local t = math.clamp(elapsedOut / durationOut, 0, 1)
                    local easedT = t * t * (3 - 2 * t)
                    Button.Position = UDim2.new(
                        startPosOut.X.Scale + (endPosOut.X.Scale - startPosOut.X.Scale) * easedT,
                        startPosOut.X.Offset + (endPosOut.X.Offset - startPosOut.X.Offset) * easedT,
                        startPosOut.Y.Scale, startPosOut.Y.Offset
                    )
                    if t >= 1 then connectionOut:Disconnect() end
                end)
                pcall(callback)
            end)

            Tab.CanvasSize = UDim2.new(0, 0, 0, TabLayout.AbsoluteContentSize.Y)
        end

        function tabcontent:Toggle(text, default, callback)
            local toggled = default or false
            local Toggle = Instance.new("TextButton")
            local ToggleCorner = Instance.new("UICorner")
            local ToggleTitle = Instance.new("TextLabel")
            local FrameToggle1 = Instance.new("Frame")
            local FrameToggle1Corner = Instance.new("UICorner")
            local FrameToggle2 = Instance.new("Frame")
            local FrameToggle2Corner = Instance.new("UICorner")
            local FrameToggle3 = Instance.new("Frame")
            local FrameToggle3Corner = Instance.new("UICorner")
            local FrameToggleCircle = Instance.new("Frame")
            local FrameToggleCircleCorner = Instance.new("UICorner")
            local ToggleStroke = Instance.new("UIStroke")

            Toggle.Name = "Toggle"
            Toggle.Parent = Tab
            Toggle.BackgroundColor3 = CurrentUIBackgroundColor
            Toggle.Size = UDim2.new(0, 363, 0, 42)
            Toggle.AutoButtonColor = false
            Toggle.Font = Enum.Font.SourceSans
            Toggle.Text = ""

            ToggleCorner.CornerRadius = UDim.new(0, 5)
            ToggleCorner.Parent = Toggle

            ToggleStroke.Parent = Toggle
            ToggleStroke.Thickness = 1.2
            ToggleStroke.Transparency = 0.2
            ToggleStroke.Color = Color3.fromRGB(0, 0, 0)
            ToggleStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border

            ToggleTitle.Name = "ToggleTitle"
            ToggleTitle.Parent = Toggle
            ToggleTitle.BackgroundTransparency = 1
            ToggleTitle.Position = UDim2.new(0.036, 0, 0, 0)
            ToggleTitle.Size = UDim2.new(0, 187, 0, 42)
            ToggleTitle.Font = Enum.Font.Gotham
            ToggleTitle.Text = text or "Unnamed Toggle"
            ToggleTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
            ToggleTitle.TextSize = 14
            ToggleTitle.TextXAlignment = Enum.TextXAlignment.Left

            FrameToggle1.Name = "FrameToggle1"
            FrameToggle1.Parent = Toggle
            FrameToggle1.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
            FrameToggle1.Position = UDim2.new(0.86, 0, 0.286, 0)
            FrameToggle1.Size = UDim2.new(0, 37, 0, 18)

            FrameToggle1Corner.Parent = FrameToggle1

            FrameToggle2.Name = "FrameToggle2"
            FrameToggle2.Parent = FrameToggle1
            FrameToggle2.BackgroundColor3 = Color3.fromRGB(34, 34, 34)
            FrameToggle2.Position = UDim2.new(0.049, 0, 0.093, 0)
            FrameToggle2.Size = UDim2.new(0, 33, 0, 14)

            FrameToggle2Corner.Parent = FrameToggle2

            FrameToggle3.Name = "FrameToggle3"
            FrameToggle3.Parent = FrameToggle1
            FrameToggle3.BackgroundColor3 = PresetColor
            FrameToggle3.BackgroundTransparency = 1
            FrameToggle3.Size = UDim2.new(0, 37, 0, 18)

            FrameToggle3Corner.Parent = FrameToggle3

            FrameToggleCircle.Name = "FrameToggleCircle"
            FrameToggleCircle.Parent = FrameToggle1
            FrameToggleCircle.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
            FrameToggleCircle.Position = UDim2.new(0.127, 0, 0.222, 0)
            FrameToggleCircle.Size = UDim2.new(0, 10, 0, 10)

            FrameToggleCircleCorner.Parent = FrameToggleCircle

            coroutine.wrap(function()
                while wait() do FrameToggle3.BackgroundColor3 = PresetColor end
            end)()

            Toggle.MouseButton1Click:Connect(function()
                if toggled == false then
                    local elapsedBg = 0
                    local durationBg = 0.3
                    local startColorBg = Toggle.BackgroundColor3
                    local endColorBg = Color3.fromRGB(37, 37, 37)
                    local connectionBg
                    connectionBg = RunService.RenderStepped:Connect(function(dt)
                        elapsedBg = elapsedBg + dt
                        local t = math.clamp(elapsedBg / durationBg, 0, 1)
                        local easedT = t * t * (3 - 2 * t)
                        Toggle.BackgroundColor3 = Color3.new(
                            startColorBg.R + (endColorBg.R - startColorBg.R) * easedT,
                            startColorBg.G + (endColorBg.G - startColorBg.G) * easedT,
                            startColorBg.B + (endColorBg.B - startColorBg.B) * easedT
                        )
                        if t >= 1 then connectionBg:Disconnect() end
                    end)

                    local elapsedFrame1 = 0
                    local durationFrame1 = 0.3
                    local connectionFrame1
                    connectionFrame1 = RunService.RenderStepped:Connect(function(dt)
                        elapsedFrame1 = elapsedFrame1 + dt
                        local t = math.clamp(elapsedFrame1 / durationFrame1, 0, 1)
                        local easedT = t * t * (3 - 2 * t)
                        FrameToggle1.BackgroundTransparency = easedT
                        FrameToggle2.BackgroundTransparency = easedT
                        FrameToggle3.BackgroundTransparency = 1 - easedT
                        if t >= 1 then connectionFrame1:Disconnect() end
                    end)

                    local elapsedCircle = 0
                    local durationCircle = 0.3
                    local startColorCircle = FrameToggleCircle.BackgroundColor3
                    local endColorCircle = Color3.fromRGB(255, 255, 255)
                    local connectionCircle
                    connectionCircle = RunService.RenderStepped:Connect(function(dt)
                        elapsedCircle = elapsedCircle + dt
                        local t = math.clamp(elapsedCircle / durationCircle, 0, 1)
                        local easedT = t * t * (3 - 2 * t)
                        FrameToggleCircle.BackgroundColor3 = Color3.new(
                            startColorCircle.R + (endColorCircle.R - startColorCircle.R) * easedT,
                            startColorCircle.G + (endColorCircle.G - startColorCircle.G) * easedT,
                            startColorCircle.B + (endColorCircle.B - startColorCircle.B) * easedT
                        )
                        if t >= 1 then connectionCircle:Disconnect() end
                    end)

                    local elapsedPos = 0
                    local durationPos = 0.2
                    local startPos = FrameToggleCircle.Position
                    local endPos = UDim2.new(0.587, 0, 0.222, 0)
                    local connectionPos
                    connectionPos = RunService.RenderStepped:Connect(function(dt)
                        elapsedPos = elapsedPos + dt
                        local t = math.clamp(elapsedPos / durationPos, 0, 1)
                        local easedT = t * t * (3 - 2 * t)
                        FrameToggleCircle.Position = UDim2.new(
                            startPos.X.Scale + (endPos.X.Scale - startPos.X.Scale) * easedT,
                            startPos.X.Offset + (endPos.X.Offset - startPos.X.Offset) * easedT,
                            startPos.Y.Scale, startPos.Y.Offset
                        )
                        if t >= 1 then connectionPos:Disconnect() end
                    end)
                else
                    local elapsedBg = 0
                    local durationBg = 0.3
                    local startColorBg = Toggle.BackgroundColor3
                    local endColorBg = CurrentUIBackgroundColor
                    local connectionBg
                    connectionBg = RunService.RenderStepped:Connect(function(dt)
                        elapsedBg = elapsedBg + dt
                        local t = math.clamp(elapsedBg / durationBg, 0, 1)
                        local easedT = t * t * (3 - 2 * t)
                        Toggle.BackgroundColor3 = Color3.new(
                            startColorBg.R + (endColorBg.R - startColorBg.R) * easedT,
                            startColorBg.G + (endColorBg.G - startColorBg.G) * easedT,
                            startColorBg.B + (endColorBg.B - startColorBg.B) * easedT
                        )
                        if t >= 1 then connectionBg:Disconnect() end
                    end)

                    local elapsedFrame1 = 0
                    local durationFrame1 = 0.3
                    local connectionFrame1
                    connectionFrame1 = RunService.RenderStepped:Connect(function(dt)
                        elapsedFrame1 = elapsedFrame1 + dt
                        local t = math.clamp(elapsedFrame1 / durationFrame1, 0, 1)
                        local easedT = t * t * (3 - 2 * t)
                        FrameToggle1.BackgroundTransparency = 1 - easedT
                        FrameToggle2.BackgroundTransparency = 1 - easedT
                        FrameToggle3.BackgroundTransparency = easedT
                        if t >= 1 then connectionFrame1:Disconnect() end
                    end)

                    local elapsedCircle = 0
                    local durationCircle = 0.3
                    local startColorCircle = FrameToggleCircle.BackgroundColor3
                    local endColorCircle = Color3.fromRGB(50, 50, 50)
                    local connectionCircle
                    connectionCircle = RunService.RenderStepped:Connect(function(dt)
                        elapsedCircle = elapsedCircle + dt
                        local t = math.clamp(elapsedCircle / durationCircle, 0, 1)
                        local easedT = t * t * (3 - 2 * t)
                        FrameToggleCircle.BackgroundColor3 = Color3.new(
                            startColorCircle.R + (endColorCircle.R - startColorCircle.R) * easedT,
                            startColorCircle.G + (endColorCircle.G - startColorCircle.G) * easedT,
                            startColorCircle.B + (endColorCircle.B - startColorCircle.B) * easedT
                        )
                        if t >= 1 then connectionCircle:Disconnect() end
                    end)

                    local elapsedPos = 0
                    local durationPos = 0.2
                    local startPos = FrameToggleCircle.Position
                    local endPos = UDim2.new(0.127, 0, 0.222, 0)
                    local connectionPos
                    connectionPos = RunService.RenderStepped:Connect(function(dt)
                        elapsedPos = elapsedPos + dt
                        local t = math.clamp(elapsedPos / durationPos, 0, 1)
                        local easedT = t * t * (3 - 2 * t)
                        FrameToggleCircle.Position = UDim2.new(
                            startPos.X.Scale + (endPos.X.Scale - startPos.X.Scale) * easedT,
                            startPos.X.Offset + (endPos.X.Offset - startPos.X.Offset) * easedT,
                            startPos.Y.Scale, startPos.Y.Offset
                        )
                        if t >= 1 then connectionPos:Disconnect() end
                    end)
                end
                toggled = not toggled
                pcall(callback, toggled)
            end)

            if default then
                local elapsedBg = 0
                local durationBg = 0.3
                local startColorBg = Toggle.BackgroundColor3
                local endColorBg = Color3.fromRGB(37, 37, 37)
                local connectionBg
                connectionBg = RunService.RenderStepped:Connect(function(dt)
                    elapsedBg = elapsedBg + dt
                    local t = math.clamp(elapsedBg / durationBg, 0, 1)
                    local easedT = t * t * (3 - 2 * t)
                    Toggle.BackgroundColor3 = Color3.new(
                        startColorBg.R + (endColorBg.R - startColorBg.R) * easedT,
                        startColorBg.G + (endColorBg.G - startColorBg.G) * easedT,
                        startColorBg.B + (endColorBg.B - startColorBg.B) * easedT
                    )
                    if t >= 1 then connectionBg:Disconnect() end
                end)

                local elapsedFrame1 = 0
                local durationFrame1 = 0.3
                local connectionFrame1
                connectionFrame1 = RunService.RenderStepped:Connect(function(dt)
                    elapsedFrame1 = elapsedFrame1 + dt
                    local t = math.clamp(elapsedFrame1 / durationFrame1, 0, 1)
                    local easedT = t * t * (3 - 2 * t)
                    FrameToggle1.BackgroundTransparency = easedT
                    FrameToggle2.BackgroundTransparency = easedT
                    FrameToggle3.BackgroundTransparency = 1 - easedT
                    if t >= 1 then connectionFrame1:Disconnect() end
                end)

                local elapsedCircle = 0
                local durationCircle = 0.3
                local startColorCircle = FrameToggleCircle.BackgroundColor3
                local endColorCircle = Color3.fromRGB(255, 255, 255)
                local connectionCircle
                connectionCircle = RunService.RenderStepped:Connect(function(dt)
                    elapsedCircle = elapsedCircle + dt
                    local t = math.clamp(elapsedCircle / durationCircle, 0, 1)
                    local easedT = t * t * (3 - 2 * t)
                    FrameToggleCircle.BackgroundColor3 = Color3.new(
                        startColorCircle.R + (endColorCircle.R - startColorCircle.R) * easedT,
                        startColorCircle.G + (endColorCircle.G - startColorCircle.G) * easedT,
                        startColorCircle.B + (endColorCircle.B - startColorCircle.B) * easedT
                    )
                    if t >= 1 then connectionCircle:Disconnect() end
                end)

                local elapsedPos = 0
                local durationPos = 0.2
                local startPos = FrameToggleCircle.Position
                local endPos = UDim2.new(0.587, 0, 0.222, 0)
                local connectionPos
                connectionPos = RunService.RenderStepped:Connect(function(dt)
                    elapsedPos = elapsedPos + dt
                    local t = math.clamp(elapsedPos / durationPos, 0, 1)
                    local easedT = t * t * (3 - 2 * t)
                    FrameToggleCircle.Position = UDim2.new(
                        startPos.X.Scale + (endPos.X.Scale - startPos.X.Scale) * easedT,
                        startPos.X.Offset + (endPos.X.Offset - startPos.X.Offset) * easedT,
                        startPos.Y.Scale, startPos.Y.Offset
                    )
                    if t >= 1 then connectionPos:Disconnect() end
                end)
                toggled = true
                pcall(callback, true)
            end

            Tab.CanvasSize = UDim2.new(0, 0, 0, TabLayout.AbsoluteContentSize.Y)
        end

        function tabcontent:Slider(text, min, max, start, callback)
            local dragging = false
            local Slider = Instance.new("TextButton")
            local SliderCorner = Instance.new("UICorner")
            local SliderTitle = Instance.new("TextLabel")
            local SliderValue = Instance.new("TextLabel")
            local SlideFrame = Instance.new("Frame")
            local CurrentValueFrame = Instance.new("Frame")
            local SlideCircle = Instance.new("ImageButton")
            local SliderStroke = Instance.new("UIStroke")

            Slider.Name = "Slider"
            Slider.Parent = Tab
            Slider.BackgroundColor3 = CurrentUIBackgroundColor
            Slider.Size = UDim2.new(0, 363, 0, 60)
            Slider.AutoButtonColor = false
            Slider.Font = Enum.Font.SourceSans
            Slider.Text = ""

            SliderCorner.CornerRadius = UDim.new(0, 5)
            SliderCorner.Parent = Slider

            SliderStroke.Parent = Slider
            SliderStroke.Thickness = 0.9
            SliderStroke.Transparency = 0.3
            SliderStroke.Color = Color3.fromRGB(0, 0, 0)
            SliderStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border

            SliderTitle.Name = "SliderTitle"
            SliderTitle.Parent = Slider
            SliderTitle.BackgroundTransparency = 1
            SliderTitle.Position = UDim2.new(0.035, 0, 0, 0)
            SliderTitle.Size = UDim2.new(0, 187, 0, 42)
            SliderTitle.Font = Enum.Font.Gotham
            SliderTitle.Text = text or "Unnamed Slider"
            SliderTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
            SliderTitle.TextSize = 14
            SliderTitle.TextXAlignment = Enum.TextXAlignment.Left

            SliderValue.Name = "SliderValue"
            SliderValue.Parent = Slider
            SliderValue.BackgroundTransparency = 1
            SliderValue.Position = UDim2.new(0.035, 0, 0, 0)
            SliderValue.Size = UDim2.new(0, 335, 0, 42)
            SliderValue.Font = Enum.Font.Gotham
            SliderValue.Text = tostring(start and math.floor((start / max) * (max - min) + min) or 0)
            SliderValue.TextColor3 = Color3.fromRGB(255, 255, 255)
            SliderValue.TextSize = 14
            SliderValue.TextXAlignment = Enum.TextXAlignment.Right

            SlideFrame.Name = "SlideFrame"
            SlideFrame.Parent = Slider
            SlideFrame.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
            SlideFrame.BorderSizePixel = 0
            SlideFrame.Position = UDim2.new(0.034, 0, 0.686, 0)
            SlideFrame.Size = UDim2.new(0, 335, 0, 3)

            CurrentValueFrame.Name = "CurrentValueFrame"
            CurrentValueFrame.Parent = SlideFrame
            CurrentValueFrame.BackgroundColor3 = PresetColor
            CurrentValueFrame.BorderSizePixel = 0
            CurrentValueFrame.Size = UDim2.new((start or 0) / max, 0, 0, 3)

            SlideCircle.Name = "SlideCircle"
            SlideCircle.Parent = SlideFrame
            SlideCircle.BackgroundTransparency = 1
            SlideCircle.Position = UDim2.new((start or 0) / max, -6, -1.304, -6)
            SlideCircle.Size = UDim2.new(0, 12, 0, 12)
            SlideCircle.Image = "rbxassetid://3570695787"
            SlideCircle.ImageColor3 = PresetColor

            coroutine.wrap(function()
                while wait() do
                    CurrentValueFrame.BackgroundColor3 = PresetColor
                    SlideCircle.ImageColor3 = PresetColor
                end
            end)()

            local function move(input)
                local posX = math.clamp((input.Position.X - SlideFrame.AbsolutePosition.X) / SlideFrame.AbsoluteSize.X, 0, 1)
                local value = math.floor((posX * (max - min)) + min)
                local elapsed = 0
                local duration = 0.05
                local startPos = SlideCircle.Position
                local endPos = UDim2.new(posX, -6, -1.304, -6)
                local startSize = CurrentValueFrame.Size
                local endSize = UDim2.new(posX, 0, 0, 3)
                local connection
                connection = RunService.RenderStepped:Connect(function(dt)
                    elapsed = elapsed + dt
                    local t = math.clamp(elapsed / duration, 0, 1)
                    local easedT = t * t * (3 - 2 * t)
                    SlideCircle.Position = UDim2.new(
                        startPos.X.Scale + (endPos.X.Scale - startPos.X.Scale) * easedT,
                        startPos.X.Offset + (endPos.X.Offset - startPos.X.Offset) * easedT
